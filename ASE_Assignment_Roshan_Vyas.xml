<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>ASE_Assignment_Roshan_Vyas</name>
    </assembly>
    <members>
        <!-- AppCanvas -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AppCanvas">
            <summary>
            Implementation of the ICanvas interface for BOOSE drawing operations.
            Delegates operations to appropriate command classes.
            </summary>
        </member>
        <member name="P:ASE_Assignment_Roshan_Vyas.AppCanvas.Xpos">
            <summary>Gets or sets the X position of the drawing cursor.</summary>
        </member>
        <member name="P:ASE_Assignment_Roshan_Vyas.AppCanvas.Ypos">
            <summary>Gets or sets the Y position of the drawing cursor.</summary>
        </member>
        <member name="P:ASE_Assignment_Roshan_Vyas.AppCanvas.PenColour">
            <summary>Gets or sets the current pen color for drawing operations.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppCanvas.Clear">
            <summary>Clears the canvas to white.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppCanvas.Reset">
            <summary>Resets the canvas to its initial state.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppCanvas.getBitmap">
            <summary>Gets the bitmap representation of the canvas.</summary>
        </member>

        <!-- AppCommandFactory -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AppCommandFactory">
            <summary>
            Factory class for creating BOOSE command instances.
            Extends the base CommandFactory to add custom commands.
            </summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppCommandFactory.MakeCommand(System.String)">
            <summary>Creates and returns an ICommand instance based on the command type.</summary>
            <param name="commandType">The type of command to create</param>
            <returns>An ICommand instance for the specified command type</returns>
        </member>

        <!-- AppParser -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AppParser">
            <summary>
            Custom parser implementation for the BOOSE language extension.
            Handles parsing of program commands and their execution.
            </summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppParser.ParseCustomCommand(System.String)">
            <summary>Parses a single line of code and creates the corresponding command.</summary>
            <param name="line">The line of code to parse.</param>
            <returns>The created command instance.</returns>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppParser.ParseAndExecuteProgram(System.String)">
            <summary>Parses and executes a complete program.</summary>
            <param name="programText">The complete program text to parse and execute.</param>
        </member>

        <!-- AppTriangle -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AppTriangle">
            <summary>Implements triangle drawing functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppTriangle.Execute(BOOSE.ICanvas)">
            <summary>Executes the triangle drawing command on the specified canvas</summary>
            <param name="target">The canvas to draw on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppTriangle.Parse(System.String[])">
            <summary>Parses the parameters for the triangle command</summary>
            <param name="parameters">Array containing width and height values</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- AppWrite -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AppWrite">
            <summary>Implements text writing functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppWrite.Execute(BOOSE.ICanvas)">
            <summary>Executes the write command on the specified canvas</summary>
            <param name="target">The canvas to write text on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AppWrite.Parse(System.String[])">
            <summary>Parses the parameters for the write command</summary>
            <param name="parameters">Array containing text to write</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- AssignCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.AssignCommand">
            <summary>Implements variable assignment functionality in the BOOSE language.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AssignCommand.Set(BOOSE.StoredProgram,System.String)">
            <summary>Sets the program context and parameters.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AssignCommand.Compile">
            <summary>Compiles the assignment command.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.AssignCommand.Execute">
            <summary>
            Executes the assignment by evaluating the expression and storing the result 
            in the program's variable table.
            </summary>
        </member>

        <!-- CircleCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.CircleCommand">
            <summary>Implements circle drawing functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.CircleCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the circle command on the specified canvas</summary>
            <param name="target">The canvas to draw on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.CircleCommand.Parse(System.String[])">
            <summary>Parses the parameters for the circle command</summary>
            <param name="parameters">Array containing radius and fill values</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- DrawToCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.DrawToCommand">
            <summary>Implements line drawing functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.DrawToCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the drawto command on the specified canvas</summary>
            <param name="target">The canvas to draw on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.DrawToCommand.Parse(System.String[])">
            <summary>Parses the parameters for the drawto command</summary>
            <param name="parameters">Array containing x and y coordinates</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- ForCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.ForCommand">
            <summary>Implements for loop functionality in the BOOSE language.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.ForCommand.Parse(System.String[])">
            <summary>Parses the parameters for the for loop.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.ForCommand.Compile">
            <summary>Compiles the for loop by initializing the loop control variable.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.ForCommand.Execute">
            <summary>Executes the for loop.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.ForCommand.AddCommand(BOOSE.ICommand)">
            <summary>Adds a command to the for loop body.</summary>
        </member>

        <!-- Form1 -->
        <member name="T:ASE_Assignment_Roshan_Vyas.Form1">
            <summary>
            Main form class for the application that handles drawing and program execution.
            Provides interface for program input and graphical output.
            </summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Form1.#ctor">
            <summary>
            Initializes the form and sets up required components including canvas,
            command factory, program storage and parser.
            </summary>
        </member>

        <!-- IfCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.IfCommand">
            <summary>Implements if-else conditional functionality in the BOOSE language.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.IfCommand.Parse(System.String[])">
            <summary>Parses the condition for the if statement.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.IfCommand.Compile">
            <summary>Compiles the condition for the if statement.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.IfCommand.Execute">
            <summary>Executes the if-else block.</summary>
        </member>

        <!-- MethodCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.MethodCommand">
            <summary>Implements method definition functionality in the BOOSE language.</summary>
        </member>
        <member name="P:ASE_Assignment_Roshan_Vyas.MethodCommand.Parameters">
            <summary>Gets the list of parameters for the method.</summary>
        </member>
        <member name="P:ASE_Assignment_Roshan_Vyas.MethodCommand.Commands">
            <summary>Gets the list of commands in the method body.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.MethodCommand.Parse(System.String[])">
            <summary>Parses the method definition from a line of code.</summary>
            <param name="parameters">The parameters for the method, starting with its name.</param>
        </member>

        <!-- MoveToCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.MoveToCommand">
            <summary>Implements cursor movement functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.MoveToCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the moveto command on the specified canvas</summary>
            <param name="target">The canvas to move cursor on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.MoveToCommand.Parse(System.String[])">
            <summary>Parses the parameters for the moveto command</summary>
            <param name="parameters">Array containing x and y coordinates</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- RectCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.RectCommand">
            <summary>Implements rectangle drawing functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.RectCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the rect command on the specified canvas</summary>
            <param name="target">The canvas to draw on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.RectCommand.Parse(System.String[])">
            <summary>Parses the parameters for the rect command</summary>
            <param name="parameters">Array containing width, height, and fill values</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- SetCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.SetCommand">
            <summary>Command for setting the cursor position on the canvas.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.SetCommand.CheckParameters(System.String[])">
            <summary>Validates the parameters for the SetCommand.</summary>
            <param name="parameters">Array of parameters to validate.</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.SetCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the SetCommand on the specified canvas.</summary>
            <param name="target">The canvas to set the cursor position on.</param>
        </member>

        <!-- SetColourCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.SetColourCommand">
            <summary>Implements color setting functionality in the BOOSE language</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.SetColourCommand.Execute(BOOSE.ICanvas)">
            <summary>Executes the setcolour command on the specified canvas</summary>
            <param name="target">The canvas to set color on</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.SetColourCommand.Parse(System.String[])">
            <summary>Parses the parameters for the setcolour command</summary>
            <param name="parameters">Array containing red, green, and blue values</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>

        <!-- Variables -->
        <member name="T:ASE_Assignment_Roshan_Vyas.Variables">
            <summary>Contains variable command implementations for the BOOSE language</summary>
        </member>
        <member name="T:ASE_Assignment_Roshan_Vyas.Variables.Int">
            <summary>Implements integer variable functionality in BOOSE</summary>
        </member>
        <member name="T:ASE_Assignment_Roshan_Vyas.Variables.Real">
            <summary>Implements real (floating-point) variable functionality in BOOSE</summary>
        </member>
        <member name="T:ASE_Assignment_Roshan_Vyas.Variables.Array">
            <summary>Implements array variable functionality in BOOSE</summary>
        </member>
        <!-- WhileCommand -->
        <member name="T:ASE_Assignment_Roshan_Vyas.WhileCommand">
            <summary>Implements while loop functionality in the BOOSE language.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.WhileCommand.#ctor">
            <summary>Initializes a new instance of WhileCommand.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.WhileCommand.Compile">
            <summary>Compiles the while condition.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.WhileCommand.Execute">
            <summary>Executes the while loop.</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.WhileCommand.EvaluateCondition">
            <summary>Evaluates the while loop condition.</summary>
            <returns>True if the condition is met; otherwise, false.</returns>
        </member>

        <!-- Variables Commands -->
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Int.CheckParameters(System.String[])">
            <summary>Validates the parameters for integer variable declaration</summary>
            <param name="Parameters">Array containing variable name and value</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Int.Execute">
            <summary>Executes the integer variable declaration</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Int.Execute(BOOSE.ICanvas)">
            <summary>Executes the integer variable declaration with canvas context</summary>
            <param name="target">The canvas context</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Real.CheckParameters(System.String[])">
            <summary>Validates the parameters for real variable declaration</summary>
            <param name="Parameters">Array containing variable name and value</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Real.Execute">
            <summary>Executes the real variable declaration</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Real.Execute(BOOSE.ICanvas)">
            <summary>Executes the real variable declaration with canvas context</summary>
            <param name="target">The canvas context</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Array.CheckParameters(System.String[])">
            <summary>Validates the parameters for array variable declaration</summary>
            <param name="Parameters">Array containing variable name and size</param>
            <exception cref="T:BOOSE.CommandException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Array.Execute">
            <summary>Executes the array variable declaration</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Variables.Array.Execute(BOOSE.ICanvas)">
            <summary>Executes the array variable declaration with canvas context</summary>
            <param name="target">The canvas context</param>
        </member>

        <!-- Program -->
        <member name="M:ASE_Assignment_Roshan_Vyas.Program.Main">
            <summary>The main entry point for the application.</summary>
        </member>

        <!-- Form1 Additional Members -->
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.myCanvas">
            <summary>Canvas interface for drawing operations</summary>
        </member>
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.b">
            <summary>Bitmap buffer for drawing operations</summary>
        </member>
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.ProgramText">
            <summary>Text content of the program to be executed</summary>
        </member>
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.Factory">
            <summary>Factory for creating application commands</summary>
        </member>
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.Program">
            <summary>Stores and manages program instructions</summary>
        </member>
        <member name="F:ASE_Assignment_Roshan_Vyas.Form1.Parser">
            <summary>Parses program text into executable commands</summary>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Form1.runBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Run button click event. Clears previous program state,
            parses the program text, and executes the parsed commands.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:ASE_Assignment_Roshan_Vyas.Form1.OutputWindow_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the paint event for the output window. Draws the current bitmap
            to the window when invalidation occurs.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Paint event arguments containing graphics context</param>
        </member>
    </members>
</doc>